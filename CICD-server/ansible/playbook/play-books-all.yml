---
# Cài đặt docker engine cho cả 4 server
- name: Install Docker engine for all
  hosts: all
  gather_facts: true
  become: true
  tasks:
    # Cài docker
    - name: Install Container Engine
      shell: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get install docker.io docker-compose -y
        systemctl enable docker.service
        systemctl start docker.service

        cat <<EOF | sudo tee /etc/docker/daemon.json
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }
        EOF
        sudo systemctl enable docker
        sudo systemctl daemon-reload
        sudo systemctl restart docker
        sudo chmod 777 /var/run/docker.sock

- name: Install jenkins container for jenkins ec2
  hosts: jenkins
  gather_facts: true
  become: true
  tasks:
    # Tạo docker compose file sẽ deploy jenkins container
    - name: Create Docker Compose file
      shell: |
        echo '
        version: "3"
        services:
          jenkins:
            image: duongtn1512/jenkins_docker:v4
            container_name: jenkins
            ports:
              - "8080:8080"
              - "50000:50000"

            volumes:
              - jenkins_home:/var/jenkins_home
              - /var/run/docker.sock:/var/run/docker.sock
              - /usr/bin/docker:/usr/bin/docker

        volumes:
          jenkins_home:
        ' > /home/ubuntu/compose.yaml

    # Chạy jenkins container bằng cái file docker compoes được viết trước đó
    - name: Run jenkins container
      shell: |
        docker-compose -f /home/ubuntu/compose.yaml up -d

    # Ngủ khoảng 15s
    - name: Wait for jenkins container run up
      shell: |
        sleep 15

    # Lấy ra mật khẩu cảu jenkins container
    - name: Get Jenkins Password
      command: docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
      register: command_output

    # In ra mật khẩu qua màn hình terraform kích hoạt ansible
    - debug:
        var: command_output.stdout_lines # In ra mật khẩu Jenkins

# Cài đặt kubeadm kubelet và kubectl cho control plane và worker node machine
- name: Install Common for master-node and worker node
  hosts: control_plane:worker_node
  gather_facts: true
  become: true
  tasks:
    # Config common setting
    - name: Setting common configuration for all nodes
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        br_netfilter
        EOF

        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        EOF

        sudo sysctl --system
      # Cài kubeadl kubectl và kubelet
    - name: Install Kubeadm, Kubectl, Kubelet
      shell: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl

        mkdir -p /etc/apt/keyrings

        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

        sudo apt-get update

        sudo apt-mark unhold kubelet kubeadm kubectl

        sudo apt-get install -y kubelet=1.27.0-00 kubeadm=1.27.0-00 kubectl=1.27.0-00

        sudo apt-mark hold kubelet kubeadm kubectl
# Cài master node cho control plane
- name: Install controlplane components
  hosts: control_plane
  gather_facts: true
  become: true
  tasks:
    # Copy các examp config k8s vào control plane
    # - name: Copy data directory to control plane EC2
    #   synchronize:
    #     src: ./data # nguồn
    #     dest: /home/ubuntu/data-examp # đích đến
    #     mode: copy # copy từ nguồn local
    #   delegate_to: localhost
    # Kubeadm init
    - name: Install controlplane components for master node
      shell: |
        CONTROLPLANE_PRIVATE_IP=$(hostname -I | awk '{print $1}')

        sudo kubeadm init --apiserver-cert-extra-sans=controlplane --apiserver-advertise-address=$CONTROLPLANE_PRIVATE_IP --pod-network-cidr=192.168.0.0/16
        sudo mkdir -p /home/ubuntu/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        sudo chown $(id -u):$(id -g) /home/ubuntu/.kube/config

        sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml

        sudo kubectl taint nodes --all node-role.kubernetes.io/control-plane-
        sleep 5
      # Lấy kube init join token
    - name: Get Kubeadm Token
      command: sudo kubeadm token create --print-join-command
      register: kubeadm_token_output
      # In ra kubeadm token sử dụng cho worker node
    - debug:
        var: kubeadm_token_output.stdout_lines

- name: Copy monitoring directory to monitor EC2 instance
  hosts: monitor
  gather_facts: true
  become: true
  tasks:
    # Copy thư mục monitoring chứa file docker compose để chạy lên monitoring server và các file cần thiết khác
    - name: Copy monitoring directory to EC2
      synchronize:
        src: ./monitoring
        dest: /home/ubuntu/monitornig
        mode: push
      delegate_to: localhost
    # Chạy lên monitoring server
    - name: Install Container Engine
      shell: |
        docker-compose -f /home/ubuntu/monitoring/docker-compose.yml up -d
