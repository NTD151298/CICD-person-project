# Install and configure prerequisites
- name: Install Common for master-node and worker node
  hosts: control_plane
  gather_facts: true
  become: true
  tasks:
    - name: Setting common configuration for all nodes
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF

        sudo modprobe overlay
        sudo modprobe br_netfilter

        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF

        sudo sysctl --system

    # Install docker engine
    - name: Install Container Engine
      shell: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get install docker.io docker-compose -y
        systemctl enable docker.service
        systemctl start docker.service

        cat <<EOF | sudo tee /etc/docker/daemon.json
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }
        EOF
        sudo systemctl enable docker
        sudo systemctl daemon-reload
        sudo systemctl restart docker

    # Install kubenetes with doc https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
    - name: Install Kubeadm, Kubectl, Kubelet
      shell: |
        sudo apt-get update

        sudo apt-get install -y apt-transport-https ca-certificates curl gpg

        sudo mkdir -m 755 /etc/apt/keyrings

        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

        sudo apt-get update

        sudo apt-get install -y kubelet kubeadm kubectl

        sudo apt-mark hold kubelet kubeadm kubectl

#- name: Install controlplane components
#  hosts: control_plane
#  gather_facts: true
#  become: true
#  tasks:
#    - name: Install controlplane components for master node
#      shell: |
#        CONTROLPLANE_PRIVATE_IP=$(hostname -I | awk '{print $1}')
#
#        sudo kubeadm init --apiserver-cert-extra-sans=controlplane --apiserver-advertise-address=$CONTROLPLANE_PRIVATE_IP --pod-network-cidr=192.168.0.0/16
#        sudo mkdir -p /home/ubuntu/.kube
#        sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
#        sudo chown $(id -u):$(id -g) /home/ubuntu/.kube/config
#
#        sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
#
#        sudo kubectl taint nodes --all node-role.kubernetes.io/control-plane-
#        sleep 5
#
#    - name: Get Kubeadm Token
#      command: sudo kubeadm token create --print-join-command
#      register: kubeadm_token_output
#
#    - debug:
#        var: kubeadm_token_output.stdout_lines
